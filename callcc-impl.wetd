---
(:date "2023/06/02")
---

# call/cc 的实现

Scheme (R5RS) 中有一个很强大的 control form，call/cc。它强大到可以在语言层面实现合作式多任务。然而，在一般的框架（`(eval expr env)`）下难以实现。其原因是一般的解释器框架下，evaluator 的调用栈是由实现解释器的语言管理的。既然 continuations 是对 evaluator 的调用栈的抽象，就意味着我们需要显式地操作调用栈。

LiSP 的第三章讲的就是这一部分的内容。在这一章中，作者介绍了面向对象的 continuation 表示，实际上就相当于有了执行的树（而不是调用栈）。这里的树表示方式就是对每个节点有一个指向父节点的指针。

新的解释器定义为 `(eval expr env continuation)`，实际上就相当于给程序做了 CPS transformation，这样 call/cc 就可以显式地操作 continuation 了。做了 CPS transformation 之后每个函数调用都是尾调用，原本会膨胀的栈空间实际上在存储的 continuation 中。

Pointers:

:ol
@(https://en.wikipedia.org/wiki/Continuation)(Wikipedia - Continuation)

@(https://en.wikipedia.org/wiki/Continuation-passing_style)(Wikipedia - CPS)

*Lisp in Small Pieces*
:end
